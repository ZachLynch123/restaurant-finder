{"version":3,"sources":["components/Restaurant.js","App.js","serviceWorker.js","components/Location.js","index.js"],"names":["Restaurant","props","number","restaurantLocation","data","restaurant","location","address","encoded","split","join","price","rating","user_rating","rating_text","cName","i","price_range","Object","toConsumableArray","concat","react_default","a","createElement","reactstrap_es","className","id","name","cuisines","href","target","App","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onClickListener","event","x","Math","floor","random","state","setState","items","isLoaded","_this2","latitude","locate","toFixed","longitude","api","header","method","headers","user-key","Content-type","credentails","fetch","then","result","json","_this$state","console","log","react_transition_group","in","appear","timeout","classNames","components_Restaurant","restaurants","onClick","react_loader_spinner_default","type","color","height","width","Component","Boolean","window","hostname","match","Location","isGeolocationAvailable","isGeolocationEnabled","coords","src_App_0","React","geolocated","positionOptions","enableHighAccuracy","userDecisionTimeout","ReactDOM","render","components_Location","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f1740597.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Card, CardText, CardBody,\r\n    CardTitle, CardSubtitle } from 'reactstrap';\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst Restaurant = (props) => {    \r\n    let number = props.number;\r\n    // gets restaurant location from props and encodes it for url\r\n    let restaurantLocation = props.data[number].restaurant.location.address;\r\n    let encoded = restaurantLocation.split(' ').join('+');\r\n    const baseUrl = \"https://www.google.com/maps/place/\";\r\n    let price = [];\r\n\r\n    // get rating for restaurant\r\n    let userRating = props.data[number].restaurant.user_rating;\r\n    let rating = userRating.rating_text;\r\n    let cName = '';\r\n\r\n\r\n    // for loop that populates array of dollar signs to signify price range\r\n    for (let i=1; i<=props.data[number].restaurant.price_range; i++){\r\n      let symb = '$';\r\n      price = [...price, symb];\r\n    }\r\n\r\n    switch (rating) {\r\n      case 'Good' || 'Very Good' || 'Excellent':\r\n        cName=\"text-success\";\r\n        break;\r\n      case 'Average':\r\n        cName=\"text-warning\";\r\n        break;\r\n      default: \r\n        cName=\"text-muted\";\r\n\r\n    }\r\n  \r\n\r\n    return (\r\n            <Card className=\"shadow-lg p-3 mb-5 bg-white rounded\" id=\"card\">\r\n              <CardBody id=\"card-body\">\r\n                <CardTitle>{props.data[number].restaurant.name}</CardTitle>\r\n                <CardSubtitle>{props.data[number].restaurant.cuisines}</CardSubtitle>\r\n                </CardBody>\r\n              <CardBody>\r\n                <CardText><a href={baseUrl + encoded} target=\"_blank\">{restaurantLocation}</a></CardText>\r\n                <CardText className={cName}>{rating}</CardText>\r\n                <CardText>{price}</CardText>\r\n              </CardBody>\r\n            </Card>\r\n\r\n    );\r\n} \r\n\r\nexport default Restaurant;","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport Loader from \"react-loader-spinner\";\r\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\r\nimport Restaurant from './components/Restaurant';\r\nimport { Col, Button, Row } from 'reactstrap';\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      items: [],\r\n      isLoaded: false,\r\n      number: 0,\r\n      \r\n    };\r\n  }\r\n  // api url https://developers.zomato.com/api/v2.1/search?count=3&lat=36.0144&lon=-115.1174&radius=75&sort=real_distance&order=asc\r\n\r\n \r\n  componentDidMount() {\r\n    this.latitude = this.props.locate.latitude.toFixed(4);\r\n    this.longitude = this.props.locate.longitude.toFixed(4);\r\n\r\n    this.api = '30b531a86dd28c712d12265fbd94fafa';\r\n    this.header = {\r\n      method: \"GET\",\r\n      headers: {\r\n        \"user-key\": this.api,\r\n        \"Content-type\": \"application/json\"\r\n      },\r\n      credentails: \"same-origin\"\r\n    }\r\n    fetch('https://developers.zomato.com/api/v2.1/search?count=20&lat=' + this.latitude + '&lon=' + this.longitude + '&radius=9000&sort=real_distance&order=asc', this.header)\r\n    .then(result => result.json())\r\n    .then(json => {\r\n      this.setState({\r\n        isLoaded: true,\r\n        items: json,\r\n        number: 1\r\n      });\r\n    } );\r\n  }\r\n\r\n\r\n  onClickListener = (event) => {\r\n    let x = Math.floor(Math.random() * 20);\r\n    \r\n    if(this.state.number === x) {\r\n      x = Math.floor(Math.random() * 20);\r\n    }\r\n    \r\n    this.setState(state => ({\r\n      number: x,\r\n    }));\r\n  }\r\n\r\n  render() {\r\n    const { isLoaded, items, number } = this.state;\r\n    if (isLoaded){\r\n      console.log(items);\r\n    return (\r\n      <div className=\"App\">\r\n      <CSSTransition\r\n            in={isLoaded}\r\n            appear={true}\r\n            timeout={900}\r\n            classNames=\"fade\"\r\n            >\r\n        <div className=\"container-fluid\">\r\n        <img className=\"bg\"></img>\r\n        <div className=\"row text-center justify-content-md-center\" >\r\n          <div className=\"col-xs-12 col-sm-6 col-md-4 col-centered\">\r\n            <div className=\"restaurant-card\">\r\n                <Restaurant data={items.restaurants} number={number}  />\r\n            </div>\r\n              <Button onClick={this.onClickListener}>Get a different restaurant</Button>\r\n            </div>\r\n\r\n          </div>\r\n        </div>\r\n        </CSSTransition>\r\n      </div>\r\n    );} else {\r\n      return (\r\n        <div className=\"load-container\">\r\n          <div className=\"load-wrapper\">\r\n            <Loader\r\n                      type=\"Puff\"\r\n                      color=\"#191970\"\r\n                      height=\"100\"\r\n                      width=\"100\"\r\n                    />\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport Loader from 'react-loader-spinner';\r\nimport App from '../App';\r\nimport { geolocated } from 'react-geolocated';\r\n\r\n\r\nclass Location extends React.Component {\r\n    render() {\r\n        return !this.props.isGeolocationAvailable\r\n          ? <div>Your browser does not support Geolocation</div>\r\n          : !this.props.isGeolocationEnabled\r\n            ? <div>Geolocation is not enabled</div>\r\n            : this.props.coords\r\n              ? <App locate={this.props.coords} />\r\n              : <Loader\r\n                  type=\"Puff\"\r\n                  color=\"#191970\"\r\n                  height=\"100\"\r\n                  width=\"100\"\r\n                />;\r\n      }\r\n}\r\n\r\nexport default geolocated({\r\n    positionOptions: {\r\n      enableHighAccuracy: false,\r\n    },\r\n    userDecisionTimeout: 5000,\r\n  })(Location);","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport Location from './components/Location';\r\n\r\nReactDOM.render(<Location />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}