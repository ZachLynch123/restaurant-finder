{"version":3,"sources":["Restaurant.js","App.js","serviceWorker.js","Location.js","index.js"],"names":["Restaurant","props","x","Math","floor","random","data","length","restaurantLocation","restaurant","location","address","encoded","split","join","price","rating","user_rating","rating_text","cName","i","price_range","Object","toConsumableArray","concat","react_default","a","createElement","className","reactstrap_es","id","name","cuisines","href","target","App","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onClickListener","event","setState","state","number","items","isLoaded","_this2","latitude","locate","toFixed","longitude","api","header","method","headers","user-key","Content-type","credentails","fetch","then","result","json","_this$state","sm","src_Restaurant","restaurants","onClick","console","log","Component","Boolean","window","hostname","match","Location","isGeolocationAvailable","isGeolocationEnabled","coords","src_App_0","React","geolocated","positionOptions","enableHighAccuracy","userDecisionTimeout","ReactDOM","render","src_Location","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"ySA8DeA,SArDI,SAACC,GAkBhB,IAfA,IAAIC,EAAIC,KAAKC,MAAMD,KAAKE,SAAWJ,EAAMK,KAAKC,QAG1CC,EAAqBP,EAAMK,KAAKJ,GAAGO,WAAWC,SAASC,QACvDC,EAAUJ,EAAmBK,MAAM,KAAKC,KAAK,KAE7CC,EAAQ,GAIRC,EADaf,EAAMK,KAAKJ,GAAGO,WAAWQ,YAClBC,YACpBC,EAAQ,GAIHC,EAAE,EAAGA,GAAGnB,EAAMK,KAAKJ,GAAGO,WAAWY,YAAaD,IAErDL,EAAKO,OAAAC,EAAA,EAAAD,CAAOP,GAAPS,OAAA,CADM,MAIb,OAAQR,GACN,IAAK,OACHG,EAAM,eACN,MACF,IAAK,UACHA,EAAM,eACN,MACF,QACEA,EAAM,aAKV,OACIM,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACfH,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAMD,UAAU,uCACdH,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAUC,GAAG,aACXL,EAAAC,EAAAC,cAACE,EAAA,EAAD,KAAY5B,EAAMK,KAAKJ,GAAGO,WAAWsB,MACrCN,EAAAC,EAAAC,cAACE,EAAA,EAAD,KAAe5B,EAAMK,KAAKJ,GAAGO,WAAWuB,WAE1CP,EAAAC,EAAAC,cAACE,EAAA,EAAD,KACEJ,EAAAC,EAAAC,cAACE,EAAA,EAAD,KAAUJ,EAAAC,EAAAC,cAAA,KAAGM,KApCL,qCAoCqBrB,EAASsB,OAAO,UAAU1B,IACvDiB,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAUD,UAAWT,GAAQH,GAC7BS,EAAAC,EAAAC,cAACE,EAAA,EAAD,KAAWd,QCmBRoB,cApEb,SAAAA,EAAYlC,GAAO,IAAAmC,EAAA,OAAAd,OAAAe,EAAA,EAAAf,CAAAgB,KAAAH,IACjBC,EAAAd,OAAAiB,EAAA,EAAAjB,CAAAgB,KAAAhB,OAAAkB,EAAA,EAAAlB,CAAAa,GAAAM,KAAAH,KAAMrC,KAoCRyC,gBAAkB,SAACC,GACjB,IAAIzC,EAAIC,KAAKC,MAAsB,GAAhBD,KAAKE,UAExB+B,EAAKQ,SAAS,SAAAC,GAAK,MAAK,CACtBC,OAAQ5C,MAtCVkC,EAAKS,MAAQ,CACXE,MAAO,GACPC,UAAU,EACVF,OAAQ,GANOV,mFAaC,IAAAa,EAAAX,KAClBA,KAAKY,SAAWZ,KAAKrC,MAAMkD,OAAOD,SAASE,QAAQ,GACnDd,KAAKe,UAAYf,KAAKrC,MAAMkD,OAAOE,UAAUD,QAAQ,GAErDd,KAAKgB,IAAM,mCACXhB,KAAKiB,OAAS,CACZC,OAAQ,MACRC,QAAS,CACPC,WAAYpB,KAAKgB,IACjBK,eAAgB,oBAElBC,YAAa,eAEfC,MAAM,8DAAgEvB,KAAKY,SAAW,QAAUZ,KAAKe,UAAY,4CAA6Cf,KAAKiB,QAClKO,KAAK,SAAAC,GAAM,OAAIA,EAAOC,SACtBF,KAAK,SAAAE,GACJf,EAAKL,SAAS,CACZI,UAAU,EACVD,MAAOiB,uCAcJ,IAAAC,EAC6B3B,KAAKO,MAAjCG,EADDiB,EACCjB,SAAUD,EADXkB,EACWlB,MAAOD,EADlBmB,EACkBnB,OACzB,OAAIE,EAEFvB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACfH,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAKqC,GAAG,IAAIpC,GAAG,UAGbL,EAAAC,EAAAC,cAACwC,EAAD,CAAY7D,KAAMyC,EAAMqB,cACxB3C,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAQwC,QAAS/B,KAAKI,iBAAtB,sBACC4B,QAAQC,IAAIzB,MAMfrB,EAAAC,EAAAC,cAAA,iCA/DU6C,aCOEC,QACW,cAA7BC,OAAOhE,SAASiE,UAEe,UAA7BD,OAAOhE,SAASiE,UAEhBD,OAAOhE,SAASiE,SAASC,MACvB,6ECbAC,mLAEE,OAAQvC,KAAKrC,MAAM6E,uBAEdxC,KAAKrC,MAAM8E,qBAEVzC,KAAKrC,MAAM+E,OACTvD,EAAAC,EAAAC,cAACsD,EAAD,CAAK9B,OAAQb,KAAKrC,MAAM+E,SACxBvD,EAAAC,EAAAC,cAAA,+CAHFF,EAAAC,EAAAC,cAAA,yCAFFF,EAAAC,EAAAC,cAAA,+DAHWuD,IAAMV,WAYdW,uBAAW,CACtBC,gBAAiB,CACfC,oBAAoB,GAEtBC,oBAAqB,KAJVH,CAKVN,GCdLU,IAASC,OAAO/D,EAAAC,EAAAC,cAAC8D,EAAD,MAAcC,SAASC,eAAe,SFyHhD,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMhC,KAAK,SAAAiC,GACjCA,EAAaC","file":"static/js/main.05d0b576.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Card, CardText, CardBody,\r\n    CardTitle, CardSubtitle } from 'reactstrap';\r\nimport './restaurant.css';\r\n\r\n\r\n\r\n\r\n\r\nconst Restaurant = (props) => {\r\n    \r\n    // generates random number 0 - 10\r\n    let x = Math.floor(Math.random() * props.data.length);\r\n\r\n    // gets restaurant location from props and encodes it for url\r\n    let restaurantLocation = props.data[x].restaurant.location.address;\r\n    let encoded = restaurantLocation.split(' ').join('+');\r\n    const baseUrl = \"https://www.google.com/maps/place/\";\r\n    let price = [];\r\n\r\n    // get rating for restaurant\r\n    let userRating = props.data[x].restaurant.user_rating;\r\n    let rating = userRating.rating_text;\r\n    let cName = '';\r\n\r\n\r\n    // for loop that populates array of dollar signs to signify price range\r\n    for (let i=1; i<=props.data[x].restaurant.price_range; i++){\r\n      let symb = '$';\r\n      price = [...price, symb];\r\n    }\r\n\r\n    switch (rating) {\r\n      case 'Good' || 'Very Good' || 'Excellent':\r\n        cName=\"text-success\";\r\n        break;\r\n      case 'Average':\r\n        cName=\"text-warning\";\r\n        break;\r\n      default: \r\n        cName=\"text-muted\";\r\n\r\n    }\r\n  \r\n\r\n    return (\r\n        <div className=\"restaurant-card\">\r\n        <Card className=\"shadow-lg p-3 mb-5 bg-white rounded\" >\r\n          <CardBody id=\"card-body\">\r\n            <CardTitle>{props.data[x].restaurant.name}</CardTitle>\r\n            <CardSubtitle>{props.data[x].restaurant.cuisines}</CardSubtitle>\r\n          </CardBody>\r\n          <CardBody>\r\n            <CardText><a href={baseUrl + encoded} target=\"_blank\">{restaurantLocation}</a></CardText>\r\n            <CardText className={cName}>{rating}</CardText>\r\n            <CardText>{price}</CardText>\r\n          </CardBody>\r\n        </Card>\r\n      </div>\r\n    );\r\n} \r\n\r\nexport default Restaurant;","import React, { Component } from 'react';\nimport './App.css';\nimport Restaurant from './Restaurant';\nimport { Col, Button } from 'reactstrap';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      items: [],\n      isLoaded: false,\n      number: 0,\n      \n    };\n  }\n  // api url https://developers.zomato.com/api/v2.1/search?count=3&lat=36.0144&lon=-115.1174&radius=75&sort=real_distance&order=asc\n\n \n  componentDidMount() {\n    this.latitude = this.props.locate.latitude.toFixed(4);\n    this.longitude = this.props.locate.longitude.toFixed(4);\n\n    this.api = '30b531a86dd28c712d12265fbd94fafa';\n    this.header = {\n      method: \"GET\",\n      headers: {\n        \"user-key\": this.api,\n        \"Content-type\": \"application/json\"\n      },\n      credentails: \"same-origin\"\n    }\n    fetch('https://developers.zomato.com/api/v2.1/search?count=20&lat=' + this.latitude + '&lon=' + this.longitude + '&radius=9000&sort=real_distance&order=asc', this.header)\n    .then(result => result.json())\n    .then(json => {\n      this.setState({\n        isLoaded: true,\n        items: json,\n      })\n    } );\n  }\n\n\n  onClickListener = (event) => {\n    let x = Math.floor(Math.random() * 10);\n    \n    this.setState(state => ({\n      number: x,\n    }));\n  }\n\n  render() {\n    const { isLoaded, items, number } = this.state;\n    if (isLoaded){\n    return (\n      <div className=\"App\">\n        <div className=\"container\">\n        <Col sm=\"8\" id=\"tester\">\n        {/* change data to only pass 1 array to the restaurant, not multiple.\n        Then refactor restaurant.js*/}\n          <Restaurant data={items.restaurants}  />\n          <Button onClick={this.onClickListener}>Try something else</Button>\n          {console.log(number)}\n        </Col>\n        </div>\n      </div>\n    );} else {\n      return (\n        <div>Didn't load</div>\n      );\n    }\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport App from './App';\r\nimport { geolocated } from 'react-geolocated';\r\n\r\n\r\nclass Location extends React.Component {\r\n    render() {\r\n        return !this.props.isGeolocationAvailable\r\n          ? <div>Your browser does not support Geolocation</div>\r\n          : !this.props.isGeolocationEnabled\r\n            ? <div>Geolocation is not enabled</div>\r\n            : this.props.coords\r\n              ? <App locate={this.props.coords} />\r\n              : <div>Getting the location data&hellip; </div>;\r\n      }\r\n}\r\n\r\nexport default geolocated({\r\n    positionOptions: {\r\n      enableHighAccuracy: false,\r\n    },\r\n    userDecisionTimeout: 5000,\r\n  })(Location);","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport Location from './Location';\n\nReactDOM.render(<Location />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}